name: Make Release

on:
  workflow_dispatch:
    inputs:
      type:
        description: 'Type of version to increment. major, minor, or patch.'
        required: true
        default: 'patch'
jobs:
  make_release:
    runs-on: "ubuntu-latest"
    outputs:
      current_ha_version: ${{ steps.current-ha-version.outputs.current-ha-version }}
    steps:
      - uses: actions/checkout@v2
      - name: store current ha version
        id: current-ha-version
        run: echo "::set-output name=current-ha-version::$(cat ha_version)"
      - id: next_version
        uses: zwaldowski/semver-release-action@v2
        with:
          dry_run: true
          bump: ${{ github.event.inputs.type }}
          github_token: ${{ secrets.REPO_SCOPED_TOKEN }}
      - run: echo "${{ steps.next_version.outputs.version }}" > version
      - run: echo "${{ steps.next_version.outputs.version }}"
      - run: |
          git config user.name 'Matthew Flamm'
          git config user.email 'MatthewFlamm@users.noreply.github.com'
          git add .
          git commit -m "Bump version"
          git push
          echo "sha=$(git rev-parse HEAD)" >> $GITHUB_ENV
      - uses: zwaldowski/semver-release-action@v2
        with:
          github_token: ${{ secrets.REPO_SCOPED_TOKEN }}
          sha: ${{ steps.git_commit.outputs.sha }}
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.REPO_SCOPED_TOKEN }}
        with:
          tag_name: ${{ steps.next_version.outputs.version }}
          release_name: Release ${{ steps.next_version.outputs.version }}
          body: |
            Automatic release
            homeassistant version: ${{ needs.generate_package.outputs.current_ha_version }}
          draft: false
          prerelease: false
      - name: Set up Python
        uses: actions/setup-python@v1
        with:
          python-version: '3.x'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install setuptools wheel twine
      - name: Build and publish
        env:
          TWINE_USERNAME: ${{ secrets.PYPI_USERNAME }}
          TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
        run: |
          python setup.py sdist bdist_wheel
          twine upload dist/*
